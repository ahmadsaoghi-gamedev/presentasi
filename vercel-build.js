// Build script for Vercel to inject environment variables
const fs = require('fs');
const path = require('path');

// Read the original config.js
const configPath = path.join(__dirname, 'config.js');
let configContent = fs.readFileSync(configPath, 'utf8');

// Replace the getEnvVar function with actual environment variables
const envVars = {
    GEMINI_API_KEY: process.env.GEMINI_API_KEY || null
};

// Create a new config with actual values
const newConfigContent = `// Configuration file for environment variables
// This file is auto-generated by Vercel build process

window.APP_CONFIG = {
    // API Configuration
    GEMINI_API_KEY: ${envVars.GEMINI_API_KEY ? `"${envVars.GEMINI_API_KEY}"` : 'null'},
    GEMINI_API_URL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
    
    // Feature flags
    ENABLE_AI_FEEDBACK: true,
    ENABLE_AUDIO: true,
    ENABLE_ANIMATIONS: true,
    
    // Fallback settings
    USE_FALLBACK_MESSAGES: true,
    FALLBACK_MESSAGE_COUNT: 8,
    
    // Debug settings (set to false in production)
    DEBUG_MODE: false,
    LOG_API_CALLS: false
};

// Helper function to get API key safely
window.getApiKey = function (service) {
    switch (service) {
        case 'gemini':
            return window.APP_CONFIG.GEMINI_API_KEY;
        default:
            return null;
    }
};

// Helper function to check if API is available
window.isApiAvailable = function (service) {
    const key = window.getApiKey(service);
    return key && key !== 'null' && key !== 'undefined' && key.length > 0;
};
`;

// Write the new config
fs.writeFileSync(configPath, newConfigContent);

console.log('âœ… Environment variables injected successfully');
console.log('GEMINI_API_KEY:', envVars.GEMINI_API_KEY ? 'Set' : 'Not set');
